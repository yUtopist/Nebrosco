[{"F:\\WEB\\Nebrosco\\client\\src\\index.js":"1","F:\\WEB\\Nebrosco\\client\\src\\reportWebVitals.js":"2","F:\\WEB\\Nebrosco\\client\\src\\App.tsx":"3","F:\\WEB\\Nebrosco\\client\\src\\components\\Components.tsx":"4","F:\\WEB\\Nebrosco\\client\\src\\components\\Navigation\\Navigation.tsx":"5","F:\\WEB\\Nebrosco\\client\\src\\components\\Tracker\\Tracker.tsx":"6","F:\\WEB\\Nebrosco\\client\\src\\components\\Dashboard\\Dashboard.tsx":"7","F:\\WEB\\Nebrosco\\client\\src\\components\\Messages\\Messages.tsx":"8","F:\\WEB\\Nebrosco\\client\\src\\components\\Account\\Account.tsx":"9","F:\\WEB\\Nebrosco\\client\\src\\components\\Settings\\Settings.tsx":"10","F:\\WEB\\Nebrosco\\client\\src\\components\\Modules\\Icon.tsx":"11","F:\\WEB\\Nebrosco\\client\\src\\components\\Dashboard\\DashboardData.tsx":"12","F:\\WEB\\Nebrosco\\client\\src\\components\\Dashboard\\Widget\\Widget.tsx":"13","F:\\WEB\\Nebrosco\\client\\src\\components\\Modules\\IconsList.tsx":"14","F:\\WEB\\Nebrosco\\client\\src\\components\\Dashboard\\Widget\\Vertical.tsx":"15","F:\\WEB\\Nebrosco\\client\\src\\components\\Dashboard\\Widget\\Line.tsx":"16","F:\\WEB\\Nebrosco\\client\\src\\components\\Dashboard\\Widget\\LargeGroup.tsx":"17","F:\\WEB\\Nebrosco\\client\\src\\components\\Dashboard\\Widget\\MediumGroup.tsx":"18","F:\\WEB\\Nebrosco\\client\\src\\components\\Dashboard\\Widget\\Donut.tsx":"19","F:\\WEB\\Nebrosco\\client\\src\\components\\Dashboard\\Widget\\Bar.tsx":"20","F:\\WEB\\Nebrosco\\client\\src\\components\\Dashboard\\Widget\\Label.tsx":"21","F:\\WEB\\Nebrosco\\client\\src\\components\\Errors\\Errors.tsx":"22","F:\\WEB\\Nebrosco\\client\\src\\components\\Settings\\SettingsData.tsx":"23","F:\\WEB\\Nebrosco\\client\\src\\components\\daddyWants.tsx":"24","F:\\WEB\\Nebrosco\\client\\src\\components\\Account\\Login.tsx":"25"},{"size":504,"mtime":1616463123736,"results":"26","hashOfConfig":"27"},{"size":362,"mtime":499162500000,"results":"28","hashOfConfig":"27"},{"size":1029,"mtime":1618344368325,"results":"29","hashOfConfig":"27"},{"size":348,"mtime":1618305030454,"results":"30","hashOfConfig":"27"},{"size":1972,"mtime":1618305320385,"results":"31","hashOfConfig":"27"},{"size":205,"mtime":1615874179696,"results":"32","hashOfConfig":"27"},{"size":433,"mtime":1618305084420,"results":"33","hashOfConfig":"27"},{"size":208,"mtime":1615874189167,"results":"34","hashOfConfig":"27"},{"size":233,"mtime":1618305413527,"results":"35","hashOfConfig":"27"},{"size":4647,"mtime":1616552577038,"results":"36","hashOfConfig":"27"},{"size":2160,"mtime":1616388463689,"results":"37","hashOfConfig":"27"},{"size":3668,"mtime":1617650623665,"results":"38","hashOfConfig":"27"},{"size":328,"mtime":1616509437279,"results":"39","hashOfConfig":"27"},{"size":5847,"mtime":1611438013775,"results":"40","hashOfConfig":"27"},{"size":690,"mtime":1616651661122,"results":"41","hashOfConfig":"27"},{"size":3987,"mtime":1617915533268,"results":"42","hashOfConfig":"27"},{"size":1302,"mtime":1618234786044,"results":"43","hashOfConfig":"27"},{"size":475,"mtime":1616651659656,"results":"44","hashOfConfig":"27"},{"size":3157,"mtime":1618233202211,"results":"45","hashOfConfig":"27"},{"size":643,"mtime":1616651662253,"results":"46","hashOfConfig":"27"},{"size":730,"mtime":1618234762826,"results":"47","hashOfConfig":"27"},{"size":392,"mtime":1616743143952,"results":"48","hashOfConfig":"27"},{"size":281,"mtime":1617466550977,"results":"49","hashOfConfig":"27"},{"size":957,"mtime":1617689485882,"results":"50","hashOfConfig":"27"},{"size":1713,"mtime":1618350988261,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"1cmi5s",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"61"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"61"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"90","usedDeprecatedRules":"61"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"61"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"61"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"F:\\WEB\\Nebrosco\\client\\src\\index.js",[],["109","110"],"F:\\WEB\\Nebrosco\\client\\src\\reportWebVitals.js",[],"F:\\WEB\\Nebrosco\\client\\src\\App.tsx",["111","112","113","114","115","116"],"F:\\WEB\\Nebrosco\\client\\src\\components\\Components.tsx",[],["117","118"],"F:\\WEB\\Nebrosco\\client\\src\\components\\Navigation\\Navigation.tsx",[],"F:\\WEB\\Nebrosco\\client\\src\\components\\Tracker\\Tracker.tsx",[],"F:\\WEB\\Nebrosco\\client\\src\\components\\Dashboard\\Dashboard.tsx",["119"],"import React from 'react';\r\nimport ReactDOM from 'react-dom'\r\nimport './Dashboard.css';\r\nimport { dashboardData } from './DashboardData';\r\n\r\nconst Dashboard = () => {\r\n  // some fetch for DashboardData\r\n\r\n  return (\r\n    <div className='Dashboard'>\r\n      {\r\n        dashboardData.map((e: any) => {\r\n          const Tab = e.type\r\n          return <Tab data={e} />\r\n        })\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Dashboard;","F:\\WEB\\Nebrosco\\client\\src\\components\\Messages\\Messages.tsx",[],"F:\\WEB\\Nebrosco\\client\\src\\components\\Account\\Account.tsx",[],"F:\\WEB\\Nebrosco\\client\\src\\components\\Settings\\Settings.tsx",[],"F:\\WEB\\Nebrosco\\client\\src\\components\\Modules\\Icon.tsx",[],"F:\\WEB\\Nebrosco\\client\\src\\components\\Dashboard\\DashboardData.tsx",[],"F:\\WEB\\Nebrosco\\client\\src\\components\\Dashboard\\Widget\\Widget.tsx",[],"F:\\WEB\\Nebrosco\\client\\src\\components\\Modules\\IconsList.tsx",[],"F:\\WEB\\Nebrosco\\client\\src\\components\\Dashboard\\Widget\\Vertical.tsx",[],"F:\\WEB\\Nebrosco\\client\\src\\components\\Dashboard\\Widget\\Line.tsx",["120","121","122","123","124","125","126"],"import React, { CSSProperties } from 'react';\r\nimport * as DaddyWants from '../../daddyWants';\r\nimport '../Dashboard.css';\r\nimport { widgetTypes } from '../DashboardData';\r\nimport Label from './Label';\r\n\r\ninterface inputTypes {\r\n  data: widgetTypes;\r\n}\r\ntype value = number | number[]\r\n\r\nconst Line = (input: inputTypes) => {\r\n  const object = input.data;\r\n\r\n\r\n\r\n  const tempLabels = [\r\n    {\r\n      label: 'Opened',\r\n      color: 'Cyan',\r\n      hex: '#00AAD4'\r\n    }\r\n  ]\r\n\r\n  const silly = 5;\r\n  const props = {\r\n    todolists: [\r\n      {\r\n        id: 20\r\n      },\r\n      {\r\n        id: 5\r\n      },\r\n      {\r\n        id: 79\r\n      },\r\n      {\r\n        id: 50\r\n      }\r\n    ]\r\n  }\r\n  const todos = props.todolists.map(e => e).sort((a, b) => a.id === silly ? -1 : b.id === silly ? 1 : 0)\r\n\r\n\r\n  // const object = input.data;\r\n  // const values = object.values.flat()\r\n  // const totalValues = values.reduce((a, b) => a + b)\r\n  // const anglesArray = DaddyWants.roundedArray(values.map(e => (e / totalValues) * 360), 360)\r\n\r\n  // // Making a temprory array of elements which contain rounded\r\n  // // and prepared angles.\r\n  // const membersArray = object.values.map((e: value, i: number) => {\r\n  //   const _part = Math.floor(anglesArray[i] / 45);\r\n  //   const _pure = anglesArray[i] - (_part * 45);\r\n  //   const _isEven = _part % 2 === 0 ? true : false;\r\n  //   const _label = object.labels === undefined ? 'Empty' : object.labels[i]\r\n  //   const _color = input.labels.filter(_e => _e.label === _label && _e)[0]\r\n  //   return {\r\n  //     colorHex: _color.hex,\r\n  //     angle: anglesArray[i],\r\n  //     part: _part,\r\n  //     angleStart: 0,\r\n  //     angleFinish: 0,\r\n  //     anglePure: _isEven ? _pure : 45 - _pure,\r\n  //   }\r\n  // })\r\n  // membersArray.forEach((e, i) => {\r\n  //   e.angleStart = i === 0 ? 0 : membersArray[i - 1].angleFinish;\r\n  //   e.angleFinish = e.angleStart + e.angle;\r\n  // })\r\n\r\n  // // Little logic to reduce font size as string increses length\r\n  // object.display ?? (object.display = '')\r\n  // const displaySize = object.display.length <= 2 ? '64px'\r\n  //   : object.display.length <= 4 ? `${72 - (object.display.length * 8)}px`\r\n  //     : '32px';\r\n\r\n  return (\r\n    <div className='Line flexed'>\r\n      <h1 className='title'>{input.data.title}</h1>\r\n      <div className='graph flex_center'>s</div>\r\n      {/* <Label labels={tempLabels} /> */}\r\n    </div>\r\n\r\n    // <div className='Donut flexed'>\r\n    //   <h1 className='title'>{input.data.title}</h1>\r\n    //   <div className='graph flexed'>\r\n    //     <h1 style={{ fontSize: displaySize }}>\r\n    //       {input.data.display}\r\n    //     </h1>\r\n    //     {\r\n    //       membersArray.map((e, i) => {\r\n\r\n    //         let polygonString = ''\r\n    //         const parts = [\r\n    //           `100% 0%`,\r\n    //           `100% 50%`,\r\n    //           `100% 100%`,\r\n    //           `50% 100%`,\r\n    //           `0% 100%`,\r\n    //           `0% 50%`,\r\n    //           `0% 0%`\r\n    //         ]\r\n    //         for (let i = 0; i < e.part; i++) {\r\n    //           polygonString += `, ${parts[i]}`\r\n    //         }\r\n    //         const opposite = Math.tan((e.anglePure) * Math.PI / 180) * 50\r\n    //         const point = [\r\n    //           `${opposite + 50}% 0%`,\r\n    //           `100% ${50 - opposite}%`,\r\n    //           `100% ${opposite + 50}%`,\r\n    //           `${opposite + 50}% 100%`,\r\n    //           `${50 - opposite}% 100%`,\r\n    //           `0% ${opposite + 50}%`,\r\n    //           `0% ${50 - opposite}%`,\r\n    //           `${50 - opposite}% 0%`,\r\n    //         ]\r\n\r\n    //         const spanStyle: CSSProperties = {\r\n    //           borderColor: e.colorHex,\r\n    //           transform: `rotate(${e.angleStart}deg)`,\r\n    //           clipPath: `polygon(50% 50%, 50% 0%${polygonString}, ${point[e.part]})`,\r\n    //         }\r\n\r\n    //         return <span style={spanStyle} />\r\n    //       })\r\n    //     }\r\n    //   </div>\r\n    // </div>\r\n  )\r\n}\r\n\r\nexport default Line;","F:\\WEB\\Nebrosco\\client\\src\\components\\Dashboard\\Widget\\LargeGroup.tsx",["127","128"],"import React, { useState } from 'react';\r\nimport { SettingsData } from '../../Settings/SettingsData';\r\nimport '../Dashboard.css';\r\nimport { groupTypes } from '../DashboardData';\r\nimport { Label } from './Widget';\r\n\r\nconst LargeGroup = (input: { data: groupTypes }) => {\r\n  const data = input.data;\r\n  const [highlightArray, setHighlightArray] = useState(false);\r\n\r\n\r\n  return (\r\n    <div className='LargeGroup flexed'>\r\n      {data.members.map((e, i) => {\r\n        // Looping thru all items and creating an array of labels\r\n        const labelsArray = [... new Set(e.flatMap(_e => _e.labels))]\r\n          .map((_e, _i) => {\r\n            const colorAlt = i === 0 ? 'dark' : 'bright'\r\n            return {\r\n              label: _e,\r\n              color: SettingsData['theme-colors'][colorAlt][_i],\r\n              highlighted: highlightArray\r\n            }\r\n          })\r\n        return (\r\n          <div className='group'>\r\n            <div className='flexed'>\r\n              {\r\n                e.map(_e => {\r\n                  const Tab = _e.type;\r\n                  return <Tab data={_e} labels={labelsArray} />\r\n                })\r\n              }\r\n            </div>\r\n            <Label labels={labelsArray} />\r\n          </div>\r\n        )\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LargeGroup;","F:\\WEB\\Nebrosco\\client\\src\\components\\Dashboard\\Widget\\MediumGroup.tsx",[],"F:\\WEB\\Nebrosco\\client\\src\\components\\Dashboard\\Widget\\Donut.tsx",["129"],"import React, { CSSProperties, useState } from \"react\";\r\nimport * as DaddyWants from \"../../daddyWants\";\r\nimport \"../Dashboard.css\";\r\nimport { widgetTypes } from \"../DashboardData\";\r\n\r\ninterface inputTypes {\r\n  data: widgetTypes;\r\n  labels: { label: string | undefined; color: string }[];\r\n}\r\ntype value = number | number[];\r\n\r\nconst Donut = (input: inputTypes) => {\r\n  const data = input.data;\r\n  const values = data.values.flat();\r\n  const totalValues = values.reduce((a, b) => a + b);\r\n  const anglesArray = DaddyWants.roundedArray(\r\n    values.map((e) => (e / totalValues) * 360),\r\n    360\r\n  );\r\n\r\n  // Making a local array of elements\r\n  // which contain rounded and prepared angles.\r\n  const membersArray = data.values.map((e: value, i: number) => {\r\n    const _part = Math.floor(anglesArray[i] / 45);\r\n    const _pure = anglesArray[i] - _part * 45;\r\n    const _isEven = _part % 2 === 0 ? true : false;\r\n    const _label = data.labels === undefined ? \"Empty\" : data.labels[i];\r\n    const _color = input.labels.filter((_e) => _e.label === _label && _e)[0];\r\n    return {\r\n      colorHex: _color.color,\r\n      angle: anglesArray[i],\r\n      part: _part,\r\n      angleStart: 0,\r\n      angleFinish: 0,\r\n      anglePure: _isEven ? _pure : 45 - _pure,\r\n      opposite: 0,\r\n    };\r\n  });\r\n  membersArray.forEach((e, i) => {\r\n    e.angleStart = i === 0 ? 0 : membersArray[i - 1].angleFinish;\r\n    e.angleFinish = e.angleStart + e.angle;\r\n    e.opposite = Math.tan((e.anglePure * Math.PI) / 180) * 50;\r\n  });\r\n\r\n  // Little logic to reduce font size as string increses length\r\n  data.display ?? (data.display = \"\");\r\n  const displaySize =\r\n    data.display.length <= 2\r\n      ? \"64px\"\r\n      : data.display.length <= 4\r\n      ? `${72 - data.display.length * 8}px`\r\n      : \"32px\";\r\n\r\n  return (\r\n    <div className=\"Donut flexed\">\r\n      <h1>{input.data.title}</h1>\r\n      <div className=\"graph flexed\">\r\n        <h1 className=\"flexed\" style={{ fontSize: displaySize }}>\r\n          {input.data.display}\r\n        </h1>\r\n        {membersArray.map((e, i) => {\r\n          let polygonString = \"\";\r\n          const parts = [\r\n            `100% 0%`,\r\n            `100% 50%`,\r\n            `100% 100%`,\r\n            `50% 100%`,\r\n            `0% 100%`,\r\n            `0% 50%`,\r\n            `0% 0%`,\r\n          ];\r\n          for (let i = 0; i < e.part; i++) {\r\n            polygonString += `, ${parts[i]}`;\r\n          }\r\n          const point = [\r\n            `${e.opposite + 50}% 0%`,\r\n            `100% ${50 - e.opposite}%`,\r\n            `100% ${e.opposite + 50}%`,\r\n            `${e.opposite + 50}% 100%`,\r\n            `${50 - e.opposite}% 100%`,\r\n            `0% ${e.opposite + 50}%`,\r\n            `0% ${50 - e.opposite}%`,\r\n            `${50 - e.opposite}% 0%`,\r\n          ];\r\n\r\n          const spanStyle: CSSProperties = {\r\n            borderColor: e.colorHex,\r\n            transform: `rotate(${e.angleStart}deg)`,\r\n            clipPath: `polygon(50% 50%, 50% 0%${polygonString}, ${\r\n              point[e.part]\r\n            })`,\r\n          };\r\n\r\n          return <span style={spanStyle} />;\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Donut;\r\n","F:\\WEB\\Nebrosco\\client\\src\\components\\Dashboard\\Widget\\Bar.tsx",[],"F:\\WEB\\Nebrosco\\client\\src\\components\\Dashboard\\Widget\\Label.tsx",["130","131"],"import React, { CSSProperties, useState } from 'react';\r\nimport '../Dashboard.css';\r\n\r\nconst Label = (input: { labels: { label: string | undefined; color: string; highlighted: boolean }[] }) => {\r\n  const [isGreyed, setGreyed] = useState(false);\r\n\r\n  const labels = input.labels;\r\n  return (\r\n    <div className='Label'>\r\n      {\r\n        labels.map(e => {\r\n          const labelStyles: CSSProperties = {\r\n            backgroundColor: e.color,\r\n          }\r\n          return (\r\n            <span className='member'>\r\n              <span className='color' style={labelStyles} />\r\n              <h5 className='label' >{e.label}</h5>\r\n            </span>\r\n          )\r\n        })\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Label;","F:\\WEB\\Nebrosco\\client\\src\\components\\Errors\\Errors.tsx",["132"],"F:\\WEB\\Nebrosco\\client\\src\\components\\Settings\\SettingsData.tsx",[],"F:\\WEB\\Nebrosco\\client\\src\\components\\daddyWants.tsx",[],"F:\\WEB\\Nebrosco\\client\\src\\components\\Account\\Login.tsx",["133","134"],{"ruleId":"135","replacedBy":"136"},{"ruleId":"137","replacedBy":"138"},{"ruleId":"139","severity":1,"message":"140","line":2,"column":27,"nodeType":"141","messageId":"142","endLine":2,"endColumn":33},{"ruleId":"139","severity":1,"message":"143","line":2,"column":35,"nodeType":"141","messageId":"142","endLine":2,"endColumn":40},{"ruleId":"139","severity":1,"message":"144","line":2,"column":42,"nodeType":"141","messageId":"142","endLine":2,"endColumn":48},{"ruleId":"139","severity":1,"message":"145","line":2,"column":50,"nodeType":"141","messageId":"142","endLine":2,"endColumn":61},{"ruleId":"139","severity":1,"message":"146","line":5,"column":8,"nodeType":"141","messageId":"142","endLine":5,"endColumn":18},{"ruleId":"139","severity":1,"message":"147","line":14,"column":8,"nodeType":"141","messageId":"142","endLine":14,"endColumn":45},{"ruleId":"135","replacedBy":"136"},{"ruleId":"137","replacedBy":"138"},{"ruleId":"139","severity":1,"message":"148","line":2,"column":8,"nodeType":"141","messageId":"142","endLine":2,"endColumn":16},{"ruleId":"139","severity":1,"message":"149","line":1,"column":17,"nodeType":"141","messageId":"142","endLine":1,"endColumn":30},{"ruleId":"139","severity":1,"message":"150","line":2,"column":13,"nodeType":"141","messageId":"142","endLine":2,"endColumn":23},{"ruleId":"139","severity":1,"message":"151","line":5,"column":8,"nodeType":"141","messageId":"142","endLine":5,"endColumn":13},{"ruleId":"139","severity":1,"message":"152","line":10,"column":6,"nodeType":"141","messageId":"142","endLine":10,"endColumn":11},{"ruleId":"139","severity":1,"message":"153","line":13,"column":9,"nodeType":"141","messageId":"142","endLine":13,"endColumn":15},{"ruleId":"139","severity":1,"message":"154","line":17,"column":9,"nodeType":"141","messageId":"142","endLine":17,"endColumn":19},{"ruleId":"139","severity":1,"message":"155","line":42,"column":9,"nodeType":"141","messageId":"142","endLine":42,"endColumn":14},{"ruleId":"139","severity":1,"message":"156","line":9,"column":26,"nodeType":"141","messageId":"142","endLine":9,"endColumn":43},{"ruleId":"157","severity":1,"message":"158","line":16,"column":33,"nodeType":"159","messageId":"160","endLine":16,"endColumn":34,"fix":"161"},{"ruleId":"139","severity":1,"message":"162","line":1,"column":32,"nodeType":"141","messageId":"142","endLine":1,"endColumn":40},{"ruleId":"139","severity":1,"message":"163","line":5,"column":10,"nodeType":"141","messageId":"142","endLine":5,"endColumn":18},{"ruleId":"139","severity":1,"message":"164","line":5,"column":20,"nodeType":"141","messageId":"142","endLine":5,"endColumn":29},{"ruleId":"139","severity":1,"message":"165","line":3,"column":11,"nodeType":"141","messageId":"142","endLine":3,"endColumn":28},{"ruleId":"166","severity":1,"message":"167","line":23,"column":52,"nodeType":"168","messageId":"169","endLine":23,"endColumn":54},{"ruleId":"166","severity":1,"message":"167","line":33,"column":58,"nodeType":"168","messageId":"169","endLine":33,"endColumn":60},"no-native-reassign",["170"],"no-negated-in-lhs",["171"],"@typescript-eslint/no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'Route' is defined but never used.","'Switch' is defined but never used.","'useLocation' is defined but never used.","'Navigation' is defined but never used.","'navigationProps' is assigned a value but never used.","'ReactDOM' is defined but never used.","'CSSProperties' is defined but never used.","'DaddyWants' is defined but never used.","'Label' is defined but never used.","'value' is defined but never used.","'object' is assigned a value but never used.","'tempLabels' is assigned a value but never used.","'todos' is assigned a value but never used.","'setHighlightArray' is assigned a value but never used.","rest-spread-spacing","Unexpected whitespace after spread operator.","SpreadElement","unexpectedWhitespace",{"range":"172","text":"173"},"'useState' is defined but never used.","'isGreyed' is assigned a value but never used.","'setGreyed' is assigned a value but never used.","'ErrorHandlerTypes' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation",[556,557],""]