[{"F:\\WEB\\Nebrosco\\client\\src\\index.js":"1","F:\\WEB\\Nebrosco\\client\\src\\reportWebVitals.js":"2","F:\\WEB\\Nebrosco\\client\\src\\App.tsx":"3","F:\\WEB\\Nebrosco\\client\\src\\components\\Components.tsx":"4","F:\\WEB\\Nebrosco\\client\\src\\components\\Navigation\\Navigation.tsx":"5","F:\\WEB\\Nebrosco\\client\\src\\components\\Tracker\\Tracker.tsx":"6","F:\\WEB\\Nebrosco\\client\\src\\components\\Dashboard\\Dashboard.tsx":"7","F:\\WEB\\Nebrosco\\client\\src\\components\\Messages\\Messages.tsx":"8","F:\\WEB\\Nebrosco\\client\\src\\components\\Account\\Account.tsx":"9","F:\\WEB\\Nebrosco\\client\\src\\components\\Settings\\Settings.tsx":"10","F:\\WEB\\Nebrosco\\client\\src\\components\\Modules\\Icon.tsx":"11","F:\\WEB\\Nebrosco\\client\\src\\components\\Dashboard\\DashboardData.tsx":"12","F:\\WEB\\Nebrosco\\client\\src\\components\\Dashboard\\Widget\\Widget.tsx":"13","F:\\WEB\\Nebrosco\\client\\src\\components\\Modules\\IconsList.tsx":"14","F:\\WEB\\Nebrosco\\client\\src\\components\\Dashboard\\Widget\\Vertical.tsx":"15","F:\\WEB\\Nebrosco\\client\\src\\components\\Dashboard\\Widget\\Line.tsx":"16","F:\\WEB\\Nebrosco\\client\\src\\components\\Dashboard\\Widget\\LargeGroup.tsx":"17","F:\\WEB\\Nebrosco\\client\\src\\components\\Dashboard\\Widget\\MediumGroup.tsx":"18","F:\\WEB\\Nebrosco\\client\\src\\components\\Dashboard\\Widget\\Donut.tsx":"19","F:\\WEB\\Nebrosco\\client\\src\\components\\Dashboard\\Widget\\Bar.tsx":"20","F:\\WEB\\Nebrosco\\client\\src\\components\\Dashboard\\Widget\\Label.tsx":"21","F:\\WEB\\Nebrosco\\client\\src\\components\\Errors\\Errors.tsx":"22"},{"size":504,"mtime":1616463123736,"results":"23","hashOfConfig":"24"},{"size":362,"mtime":499162500000,"results":"25","hashOfConfig":"24"},{"size":758,"mtime":1616567398303,"results":"26","hashOfConfig":"24"},{"size":295,"mtime":1616137676823,"results":"27","hashOfConfig":"24"},{"size":2132,"mtime":1616553264731,"results":"28","hashOfConfig":"24"},{"size":205,"mtime":1615874179696,"results":"29","hashOfConfig":"24"},{"size":449,"mtime":1617113866527,"results":"30","hashOfConfig":"24"},{"size":208,"mtime":1615874189167,"results":"31","hashOfConfig":"24"},{"size":205,"mtime":1615874141759,"results":"32","hashOfConfig":"24"},{"size":4647,"mtime":1616552577038,"results":"33","hashOfConfig":"24"},{"size":2160,"mtime":1616388463689,"results":"34","hashOfConfig":"24"},{"size":4055,"mtime":1617459633018,"results":"35","hashOfConfig":"24"},{"size":328,"mtime":1616509437279,"results":"36","hashOfConfig":"24"},{"size":5847,"mtime":1611438013775,"results":"37","hashOfConfig":"24"},{"size":690,"mtime":1616651661122,"results":"38","hashOfConfig":"24"},{"size":802,"mtime":1617411450685,"results":"39","hashOfConfig":"24"},{"size":2264,"mtime":1617458777502,"results":"40","hashOfConfig":"24"},{"size":475,"mtime":1616651659656,"results":"41","hashOfConfig":"24"},{"size":5323,"mtime":1617411356763,"results":"42","hashOfConfig":"24"},{"size":643,"mtime":1616651662253,"results":"43","hashOfConfig":"24"},{"size":624,"mtime":1617375155108,"results":"44","hashOfConfig":"24"},{"size":392,"mtime":1616743143952,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"1cmi5s",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"53"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"53"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"F:\\WEB\\Nebrosco\\client\\src\\index.js",[],["94","95"],"F:\\WEB\\Nebrosco\\client\\src\\reportWebVitals.js",[],"F:\\WEB\\Nebrosco\\client\\src\\App.tsx",[],["96","97"],"F:\\WEB\\Nebrosco\\client\\src\\components\\Components.tsx",[],"F:\\WEB\\Nebrosco\\client\\src\\components\\Navigation\\Navigation.tsx",[],"F:\\WEB\\Nebrosco\\client\\src\\components\\Tracker\\Tracker.tsx",[],"F:\\WEB\\Nebrosco\\client\\src\\components\\Dashboard\\Dashboard.tsx",["98"],"import React from 'react';\r\nimport ErrorHandler from '../Errors/Errors';\r\nimport './Dashboard.css';\r\nimport { dashboardData } from './DashboardData';\r\n\r\nconst Dashboard = () => {\r\n  // some fetch for DashboardData\r\n\r\n  return (\r\n    <div className='Dashboard'>\r\n      {\r\n        dashboardData.map((e: any) => {\r\n          const Tab = e.type\r\n          return <Tab data={e} />\r\n        })\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Dashboard;\r\n\r\n","F:\\WEB\\Nebrosco\\client\\src\\components\\Messages\\Messages.tsx",[],"F:\\WEB\\Nebrosco\\client\\src\\components\\Account\\Account.tsx",[],"F:\\WEB\\Nebrosco\\client\\src\\components\\Settings\\Settings.tsx",[],"F:\\WEB\\Nebrosco\\client\\src\\components\\Modules\\Icon.tsx",[],"F:\\WEB\\Nebrosco\\client\\src\\components\\Dashboard\\DashboardData.tsx",[],"F:\\WEB\\Nebrosco\\client\\src\\components\\Dashboard\\Widget\\Widget.tsx",[],"F:\\WEB\\Nebrosco\\client\\src\\components\\Modules\\IconsList.tsx",[],"F:\\WEB\\Nebrosco\\client\\src\\components\\Dashboard\\Widget\\Vertical.tsx",[],"F:\\WEB\\Nebrosco\\client\\src\\components\\Dashboard\\Widget\\Line.tsx",["99"],"F:\\WEB\\Nebrosco\\client\\src\\components\\Dashboard\\Widget\\LargeGroup.tsx",["100","101","102","103","104","105"],"F:\\WEB\\Nebrosco\\client\\src\\components\\Dashboard\\Widget\\MediumGroup.tsx",[],"F:\\WEB\\Nebrosco\\client\\src\\components\\Dashboard\\Widget\\Donut.tsx",["106","107"],"import React, { CSSProperties } from 'react';\r\nimport ErrorHandler from '../../Errors/Errors';\r\nimport '../Dashboard.css';\r\nimport { widgetTypes } from '../DashboardData';\r\n\r\ninterface dataTypes {\r\n  data: widgetTypes;\r\n  labels: { color: string; label: string }[]\r\n}\r\ntype value = number | number[]\r\n\r\nconst Donut = (data: dataTypes) => {\r\n  const object = data.data;\r\n  let totalValues = 0;\r\n  object.values.forEach((e: value) => totalValues += Array.isArray(e) ? e[0] : e)\r\n\r\n  // holly shit i got this\r\n  // rounding up all the angles and making sure they sum up to 360\r\n  // used largest remainder method\r\n  // https://en.wikipedia.org/wiki/Largest_remainder_method\r\n  // https://gist.github.com/scwood/e58380174bd5a94174c9f08ac921994f\r\n  const roundedAnglesArray = object.values.map((e: value, i: number) => {\r\n    const _value = Array.isArray(e) ? e[0] : e;\r\n    const _angle = (_value / totalValues) * 360;\r\n    return {\r\n      integer: Math.floor(_angle),\r\n      reminder: _angle - Math.floor(_angle),\r\n      index: i\r\n    }\r\n  }).sort((a, b) => b.reminder - a.reminder)\r\n  const totalAngles = roundedAnglesArray.reduce((a, b) => a + b.integer, 0)\r\n  for (let i = 0; i < 360 - totalAngles; i++) {\r\n    roundedAnglesArray[i].integer++\r\n  }\r\n  roundedAnglesArray.sort((a, b) => a.index - b.index).map(e => {\r\n    return e.integer\r\n  })\r\n\r\n  // a fucking mess\r\n  const membersArray = roundedAnglesArray.map((e, i) => {\r\n    const _value = object.values[i];\r\n    const _part = Math.floor(e.integer / 45);\r\n    return {\r\n      label: object.labels === undefined ? 'Empty' : object.labels[i],\r\n      value: Array.isArray(_value) ? _value[0] : _value,\r\n      angle: e.integer,\r\n      part: _part,\r\n      angleStart: 0,\r\n      angleFinish: 0,\r\n      anglePure: e.integer - (_part * 45),\r\n      color: data.labels[i].color\r\n    }\r\n  })\r\n  membersArray.forEach((e, i) => {\r\n    e.angleStart = i === 0 ? 0 : membersArray[i - 1].angleFinish;\r\n    e.angleFinish = e.angleStart + e.angle;\r\n  })\r\n\r\n  object.display ?? (object.display = '')\r\n  const displaySize = object.display.length <= 2 ? '64px'\r\n    : object.display.length <= 4 ? `${72 - (object.display.length * 8)}px`\r\n      : '32px';\r\n  return (\r\n    <div className='Donut flexed'>\r\n      <h1 className='title'>{data.data.title}</h1>\r\n      <div className='graph flexed'>\r\n        <h1 style={{ fontSize: displaySize }}>\r\n          {data.data.display}\r\n        </h1>\r\n\r\n        {\r\n          membersArray.map((e, i) => {\r\n\r\n            const opposite = (Math.tan(e.anglePure * Math.PI / 180) * 50)\r\n            const point = [\r\n              `${opposite + 50}% 0%`,\r\n              `100% ${opposite}%`,\r\n              `100% ${opposite + 50}%`,\r\n              `${100 - opposite}% 100%`,\r\n              `${50 - opposite}% 100%`,\r\n              `0% ${100 - opposite}%`,\r\n              `0% ${50 - opposite}%`,\r\n              `${opposite}% 0%`,\r\n            ]\r\n            let polygonString = ''\r\n            for (let i = 0; i < e.part; i++) {\r\n              const parts = [\r\n                `100% 0%`,\r\n                `100% 50%`,\r\n                `100% 100%`,\r\n                `50% 100%`,\r\n                `0% 100%`,\r\n                `0% 50%`,\r\n                `0% 0%`\r\n              ]\r\n              polygonString += `, ${parts[i]}`\r\n            }\r\n\r\n            // Need to fix colors since now they are index dependend\r\n            // and i need to map thru and find one which is the \r\n            // same name as in the data array\r\n            const spanStyle: CSSProperties = {\r\n              transform: `rotate(${e.angleStart}deg)`,\r\n              border: `30px solid ${e.color}`,\r\n              clipPath: `polygon(50% 50%, 50% 0%${polygonString}, ${point[e.part]})`,\r\n            }\r\n            return <span style={spanStyle} />\r\n          })\r\n        }\r\n      </div>\r\n    </div>\r\n  )\r\n\r\n\r\n\r\n\r\n  /////////////////////////////////////////////////////////////////\r\n  if (data.data.id === 'widget-total-tasks') {\r\n    // const colors = ['#00aad4', '#ff5252', '#5bc565', '#ffe925']\r\n    // const labels = ['Opened', 'In Progress', 'Resolved', 'Reopened']\r\n    // const dataArray = [30, 20, 20, 20]\r\n    // const total = dataArray.reduce((a, b) => a + b, 0);\r\n\r\n    // const membersArray = dataArray.map((e, i) => {\r\n    //   const angle = (e / total) * 360\r\n    //   return {\r\n    //     label: labels[i],\r\n    //     value: e,\r\n    //     percentage: e / total,\r\n    //     angle: angle,\r\n    //     part: Math.floor(angle / 45),\r\n    //     angleStart: 0,\r\n    //     angleFinish: 0,\r\n    //     anglePure: angle - ((Math.floor(angle / 45)) * 45)\r\n    //   }\r\n    // })\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // const arrayLol = [40, 70, 100, 150, 190, 250, 310, 320]\r\n    // arrayLol.map(e => {\r\n\r\n    //   const value = e;\r\n    //   const part = Math.floor(e / 45)\r\n    //   const corter = part + 1;\r\n    //   const pureValue = value - (part * 45)\r\n    //   const valuesTotal = arrayLol.reduce((a, b) => a + b, 0)\r\n    //   const angle = (pureValue / valuesTotal) * 360\r\n    //   const opposite = Math.tan(angle * Math.PI / 180) * 100\r\n    //   let polygonString = ''\r\n\r\n\r\n    //   // return console.log(`clip-path: polygon(50% 50%, ${polygonString}, ${opposite})`)\r\n\r\n    // })\r\n\r\n  }\r\n  /////////////////////////////////////////////////////////////////\r\n}\r\n\r\nexport default Donut;","F:\\WEB\\Nebrosco\\client\\src\\components\\Dashboard\\Widget\\Bar.tsx",[],"F:\\WEB\\Nebrosco\\client\\src\\components\\Dashboard\\Widget\\Label.tsx",[],"F:\\WEB\\Nebrosco\\client\\src\\components\\Errors\\Errors.tsx",["108"],{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","replacedBy":"112"},{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","severity":1,"message":"114","line":2,"column":8,"nodeType":"115","messageId":"116","endLine":2,"endColumn":20},{"ruleId":"113","severity":1,"message":"117","line":3,"column":10,"nodeType":"115","messageId":"116","endLine":3,"endColumn":20},{"ruleId":"113","severity":1,"message":"118","line":4,"column":10,"nodeType":"115","messageId":"116","endLine":4,"endColumn":15},{"ruleId":"113","severity":1,"message":"119","line":5,"column":10,"nodeType":"115","messageId":"116","endLine":5,"endColumn":22},{"ruleId":"120","severity":1,"message":"121","line":27,"column":33,"nodeType":"122","messageId":"123","endLine":27,"endColumn":34,"fix":"124"},{"ruleId":"113","severity":1,"message":"125","line":52,"column":7,"nodeType":"115","messageId":"116","endLine":52,"endColumn":12},{"ruleId":"113","severity":1,"message":"126","line":53,"column":7,"nodeType":"115","messageId":"116","endLine":53,"endColumn":28},{"ruleId":"127","severity":1,"message":"128","line":71,"column":1,"nodeType":"129","messageId":"130","endLine":80,"endColumn":2},{"ruleId":"113","severity":1,"message":"114","line":2,"column":8,"nodeType":"115","messageId":"116","endLine":2,"endColumn":20},{"ruleId":"131","severity":1,"message":"132","line":118,"column":3,"nodeType":"133","messageId":"134","endLine":161,"endColumn":4},{"ruleId":"113","severity":1,"message":"135","line":3,"column":11,"nodeType":"115","messageId":"116","endLine":3,"endColumn":28},"no-native-reassign",["136"],"no-negated-in-lhs",["137"],"@typescript-eslint/no-unused-vars","'ErrorHandler' is defined but never used.","Identifier","unusedVar","'groupTypes' is defined but never used.","'Label' is defined but never used.","'roundedArray' is defined but never used.","rest-spread-spacing","Unexpected whitespace after spread operator.","SpreadElement","unexpectedWhitespace",{"range":"138","text":"139"},"'Group' is assigned a value but never used.","'labelsArray' is assigned a value but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","no-unreachable","Unreachable code.","IfStatement","unreachableCode","'ErrorHandlerTypes' is defined but never used.","no-global-assign","no-unsafe-negation",[927,928],""]